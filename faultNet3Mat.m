function [y1] = faultNet3Mat(x1)
%FAULTNET3MAT neural network simulation function.
%
% Auto-generated by MATLAB, 05-Jul-2021 14:48:40.
% 
% [y1] = faultNet3Mat(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 3xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [295.889396902697;-254.410855826584;23;-273.541788251811];
x1_step1.gain = [0.029562886989156;0.00392610400254377;0.00587975892988388;0.00587081915650398];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.4619708693727595517;1.016220185683492705;-1.4187817853497506349;-1.2486638174677076041;-0.23505233864352875761;0.64831100915654471528;-1.351548803558087819;1.737949393012412358;2.139267429136999521;3.2862250829442216649];
IW1_1 = [-0.60746551446251983997 1.6662491788350082267 1.131998466095568201 1.3652977131021741819;-2.0730896384197317062 -2.7963287975079538228 0.31820170752914550549 0.049481900506083059676;2.0095292125522301596 -1.4425582626763653327 0.090279298456328080369 0.13509730719229415263;0.46579286511696949002 -1.3656142646027604748 1.4093600383771922591 -1.4955642492518590458;0.36985503824180604449 -1.5193066252749296563 -1.3063689997226477502 1.5474969496293320415;1.8358633316306114391 -1.6193255029436064429 -0.3448099866935895319 -0.028072724039106967953;-0.65185450527410204735 0.74249476786832990793 -1.3635022921251787054 -1.9530924464113388339;0.35842892169692552873 -1.4753883536441034785 0.24687942411958074818 -1.587089067194802583;1.9352240469182233618 -1.9658375821332960687 0.062364112603694420167 0.74129945200604197009;0.44985845955692915776 -2.0119414068574172916 -0.35069132712566336574 -0.92126420441801848416];

% Layer 2
b2 = [1.2189665319848310698;0.22212414422713974704;-0.45590175281172845567];
LW2_1 = [0.1581152735291158351 0.39905915412218889715 -0.19391260701185755733 -0.69887049080202545692 0.053707830862900582392 1.0740725754174842432 1.0303176434230705283 1.5479514166273973252 2.0752765269669972703 2.588811716987120537;-0.32200523367330080582 -1.7334846424466019421 -0.3767637566017620343 -0.83571060787058892849 -0.30213990178168870226 -0.79862223588676217734 -0.72811088739973328643 0.51298151839206340696 -0.31683366509290372681 0.21916774990626658459;0.2319228229745785852 1.568037040844029173 0.19493681494850639835 0.30191714928652463312 -0.62725556057267883858 0.42036931261346011102 -0.52697427991866541142 -0.030836407302314482182 -2.0413170695000233401 -1.19439084991490585];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
